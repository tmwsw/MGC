import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from catboost import CatBoostRegressor
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–æ–∫", page_icon="üìä", layout="wide")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–æ–∫ —Å –ø–æ–º–æ—â—å—é CatBoost")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    model = CatBoostRegressor()
    model.load_model("catboostmodel_Marin.cbm")  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏
    return model

model = load_model()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_historical_data():
    df = pd.read_excel("combined_df.xlsx")
    df["dt"] = pd.to_datetime(df["dt"])
    df = df.sort_values(by="dt")
    return df

historical_prices = load_historical_data()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–¥–µ–ª—å –∑–∞–∫—É–ø–∫–∏
def calculate_weeks(price, predicted_price):
    if predicted_price > price * 1.04:
        return 1  # –¶–µ–Ω–∞ —Ä–∞—Å—Ç—ë—Ç (+4%) ‚Üí –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–∫—É–ø–∫–∞
    elif predicted_price > price * 1.025:
        return 2  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç
    elif predicted_price > price * 1.01:
        return 3  # –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç
    elif predicted_price > price:
        return 4  # –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç (—Å—Ç–∞–±–∏–ª—å–Ω—ã–π)
    elif predicted_price < price * 0.975:
        return 6  # –¶–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç (-2%) ‚Üí –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–∫—É–ø–∫–∞
    else:
        return 5  # –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ü–µ–Ω–∞ ‚Üí —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º –∑–∞–∫—É–ø–∫–∏

# –í–≤–æ–¥ –¥–∞—Ç—ã –∏ —Ü–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
date_input = st.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:", min_value=datetime.today())
price = st.number_input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É:", min_value=0.0, format="%.2f")

if st.button("üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", type="primary"):
    if price > 0:
        days_ahead = (date_input - datetime.today().date()).days
        predicted_price = np.expm1(model.predict([[price, days_ahead]])[0])
        weeks = calculate_weeks(price, predicted_price)
        
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
        st.write(f"üìÖ **–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞:** {date_input}")
        st.write(f"üîπ **–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞:** {predicted_price:.2f}")
        st.write(f"üìÖ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∑–∞–∫—É–ø–∫–µ:** {weeks} –Ω–µ–¥–µ–ª—å")
        
    else:
        st.warning("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–±–æ–ª—å—à–µ 0)")