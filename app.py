import streamlit as st
import pandas as pd
import numpy as np
import io
from catboost import CatBoostRegressor
import matplotlib.pyplot as plt

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–æ–∫", page_icon="üìä", layout="wide")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–æ–∫ —Å –ø–æ–º–æ—â—å—é CatBoost")
st.markdown("""
    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ 
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CatBoost-–º–æ–¥–µ–ª–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∫–ª—é—á–∞—é—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—É—é —Ü–µ–Ω—É –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ 
    –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–¥–µ–ª—å –¥–ª—è –∑–∞–∫—É–ø–∫–∏.
""")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    model = CatBoostRegressor()
    model.load_model("catboostmodel_Marin.cbm")  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏
    return model

model = load_model()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
def process_data(df):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
    df["dt"] = pd.to_datetime(df["dt"], dayfirst=True)
    df.rename(columns={'–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É': 'Price'}, inplace=True, errors='ignore')

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    if 'Price' in df.columns:
        df["Price_source"] = df["Price"].shift(1)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN
        df["Price_source"] = df["Price_source"].interpolate(method='linear')
        df["Price_source"] = df["Price_source"].fillna(df["Price_source"].mean())

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    X_test = df[['Price_source']].iloc[1:, :]
    df = df.iloc[1:, :]
    df["Predicted_Price"] = np.expm1(model.predict(X_test))

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –Ω–µ–¥–µ–ª—å –∑–∞–∫—É–ø–∫–∏
    def calculate_weeks(row):
        if row["Predicted_Price"] > row["Price"] * 1.02:
            return 6  # –¶–µ–Ω–∞ —Ä–∞—Å—Ç—ë—Ç (+2%)
        elif row["Predicted_Price"] > row["Price"]:
            return 4  # –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç
        elif row["Predicted_Price"] < row["Price"] * 0.98:
            return 1  # –¶–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç (-2%)
        else:
            return 3  # –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ü–µ–Ω–∞ ‚Üí —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º –∑–∞–∫—É–ø–∫–∏

    df["Weeks_to_Procure"] = df.apply(calculate_weeks, axis=1)
    return df

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª", type=["xlsx"])
    st.markdown("---")
    st.markdown("### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    st.markdown("""
        1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel.
        2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ**.
        3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –Ω–∏–∂–µ.
    """)

if uploaded_file is not None:
    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    df = pd.read_excel(uploaded_file)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    st.subheader("üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    st.dataframe(df.head(), use_container_width=True)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    if st.button("üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", type="primary"):
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ..."):
            result_df = process_data(df)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
            st.dataframe(result_df, use_container_width=True)

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–π —Ü–µ–Ω—ã")
            fig, ax = plt.subplots()
            ax.plot(result_df["dt"], result_df["Price"], label="–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞")
            ax.plot(result_df["dt"], result_df["Predicted_Price"], label="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞", linestyle="--")
            ax.set_xlabel("–î–∞—Ç–∞")
            ax.set_ylabel("–¶–µ–Ω–∞")
            ax.legend()
            st.pyplot(fig)

            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            st.subheader("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            output = io.BytesIO()
            result_df.to_excel(output, index=False, engine='openpyxl')
            output.seek(0)

            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å –∫–∞–∫ Excel",
                data=output,
                file_name="predicted_procurement.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )