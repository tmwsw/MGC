import streamlit as st
import numpy as np
import pandas as pd
from catboost import CatBoostRegressor
from datetime import datetime, timedelta
import io
import matplotlib.pyplot as plt
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–∫—É–ø–∫–∞–º", page_icon="üìä", layout="wide")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–∫—É–ø–∫–∞–º")
st.write("–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–¥–µ–ª—å –¥–ª—è –∑–∞–∫—É–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_resource
def load_model():
    model = CatBoostRegressor()
    model.load_model("main_model.cbm")
    return model

@st.cache_data
def load_historical_data():
    df = pd.read_excel("combined_df.xlsx")
    df["dt"] = pd.to_datetime(df["dt"])
    df = df.sort_values(by="dt")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['price_1week_ago'] = df['Price'].shift(7)
    df['price_1month_ago'] = df['Price'].shift(30)
    df['rolling_7d'] = df['Price'].rolling(7).mean()
    df['rolling_30d'] = df['Price'].rolling(30).mean()
    df['month'] = df['dt'].dt.month
    df['day_of_week'] = df['dt'].dt.dayofweek
    
    df = df.dropna()
    return df

model = load_model()
historical_prices = load_historical_data()

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–¥–µ–ª—å –∑–∞–∫—É–ø–∫–∏
def calculate_weeks(price, predicted_prices):
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
    changes = [(p - price)/price*100 for p in predicted_prices]
    
    # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    avg_change = np.mean(changes)
    max_change = np.max(changes)
    min_change = np.min(changes)
    volatility = max_change - min_change  # –†–∞–∑–º–∞—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞
    trend_strength = abs(avg_change)
    
    # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-6 –Ω–µ–¥–µ–ª—å
    if avg_change > 0:  # –ü—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω
        if trend_strength > 5 or volatility > 8:
            return 1, f"üö® –°—Ä–æ—á–Ω–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–∫—É–ø–∫–∞ (—Ä–µ–∑–∫–∏–π —Ä–æ—Å—Ç –¥–æ +{max_change:.1f}%)"
        elif trend_strength > 3:
            return 2, f"‚ö†Ô∏è –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –∑–∞–∫—É–ø–∫–∞ (—Å–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç +{avg_change:.1f}%)"
        elif trend_strength > 1:
            return 3, f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–∫—É–ø–∫–∞ (—Ä–æ—Å—Ç +{avg_change:.1f}%)"
        else:
            return 4, f"–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∑–∞–∫—É–ø–∫–∞ (–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç +{avg_change:.1f}%)"
    else:  # –ü—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω
        if trend_strength > 5 or volatility > 8:
            return 6, f"üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–∫—É–ø–∫–∞ (—Ä–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ {min_change:.1f}%)"
        elif trend_strength > 3:
            return 5, f"üìà –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–∫—É–ø–∫–∞ (–ø–∞–¥–µ–Ω–∏–µ {avg_change:.1f}%)"
        elif trend_strength > 1:
            return 4, f"–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∑–∞–∫—É–ø–∫–∞ (–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ {avg_change:.1f}%)"
        else:
            return 3, f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–∫—É–ø–∫–∞ (—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ü–µ–Ω—ã)"

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
def create_features(current_price, days_ahead, date):
    features = {
        'Price_source': current_price,
        'days_ahead': days_ahead,
        'day_of_week': date.weekday(),
        'day_of_month': date.day,
        'month': date.month,
        'is_month_end': date.day > 25,
        'price_1week_ago': historical_prices["Price"].iloc[-7],
        'price_1month_ago': historical_prices["Price"].iloc[-30],
        'rolling_7d_avg': historical_prices["rolling_7d"].iloc[-1],
        'rolling_30d_avg': historical_prices["rolling_30d"].iloc[-1],
        'price_change_7d': (current_price - historical_prices["Price"].iloc[-7])/historical_prices["Price"].iloc[-7]*100,
    }
    
    # –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    features['sin_month'] = np.sin(2 * np.pi * date.month / 12)
    features['cos_month'] = np.cos(2 * np.pi * date.month / 12)
    
    return features

# –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
col1, col2 = st.columns([1, 3])

# –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
with col1:
    st.header("üìÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    date_input = st.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", 
                             min_value=datetime.today(), 
                             value=datetime.today(),
                             format="YYYY/MM/DD")
    
    if st.button("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é", type="primary", use_container_width=True):
        st.session_state['calculate'] = True
    else:
        st.session_state['calculate'] = False

# –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≥—Ä–∞—Ñ–∏–∫
with col2:
    if 'calculate' in st.session_state and st.session_state['calculate']:
        current_price = historical_prices["Price"].iloc[-1]
        days_ahead = (date_input - datetime.today().date()).days
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 6 –Ω–µ–¥–µ–ª—å –≤–ø–µ—Ä–µ–¥ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        future_dates = [date_input + timedelta(weeks=i) for i in range(0, 6)]  # –û—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –¥–æ +5 –Ω–µ–¥–µ–ª—å (–≤—Å–µ–≥–æ 6 —Ç–æ—á–µ–∫)
        future_prices = []
        
        base_noise = current_price * 0.005  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞

        for i, date in enumerate(future_dates):
            days = (date - datetime.today().date()).days
            features = create_features(current_price, days, date)
            features_df = pd.DataFrame([features])[model.feature_names_]
            
            predicted = np.expm1(model.predict(features_df)[0])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å
            noise = np.random.uniform(-base_noise, base_noise) * (i+1)/2
            seasonal_factor = 1 + (features['sin_month'] * 0.01)
            
            final_price = predicted * seasonal_factor + noise
            future_prices.append(final_price)
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É - –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        predicted_price = future_prices[0]
        weeks, recommendation = calculate_weeks(current_price, future_prices)
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
        st.header(f"üìà –ü—Ä–æ–≥–Ω–æ–∑ —Å {date_input.strftime('%d.%m.%Y')} –Ω–∞ 6 –Ω–µ–¥–µ–ª—å")
        
        forecast_df = pd.DataFrame({
            "–î–∞—Ç–∞": future_dates,
            "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞": future_prices,
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ, %": [(price - current_price)/current_price*100 for price in future_prices]
        })
        
        fig, ax = plt.subplots(figsize=(8, 4))
        ax.plot(forecast_df["–î–∞—Ç–∞"], forecast_df["–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞"], marker='o', color='#1f77b4', linewidth=2)
        ax.axhline(current_price, color='red', linestyle='--', linewidth=1)

        ax.set_title(f"–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã —Å {date_input.strftime('%d.%m.%Y')}")
        ax.set_xlabel("–î–∞—Ç–∞")
        ax.set_ylabel("–¶–µ–Ω–∞")
        ax.set_xticks(future_dates)
        ax.set_xticklabels([date.strftime('%d.%m') for date in future_dates])
        ax.grid(True, linestyle='--', alpha=0.7)
        plt.xticks(rotation=45)
        st.pyplot(fig)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º
        st.subheader("üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∑–∞–∫—É–ø–∫–∞–º")
        col_rec1, col_rec2 = st.columns([1, 3])
        with col_rec1:
            st.metric("–ù–µ–¥–µ–ª—å –¥–ª—è –∑–∞–∫—É–ø–∫–∏", weeks)
        with col_rec2:
            st.write(recommendation)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
        st.dataframe(forecast_df.style.format({
            "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞": "{:,.2f}",
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ, %": "{:.1f}%"
        }).background_gradient(cmap='Blues', subset=["–ò–∑–º–µ–Ω–µ–Ω–∏–µ, %"]), 
        use_container_width=True)
        
        # –°–µ–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.header("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            pd.DataFrame({
                "–î–∞—Ç–∞": [date_input.strftime('%d.%m.%Y')],
                "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞": [predicted_price],
                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã, %": [(predicted_price - current_price)/current_price*100],
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å": [weeks],
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": [recommendation]
            }).to_excel(writer, sheet_name="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", index=False)
            
            forecast_df.to_excel(writer, sheet_name="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –Ω–µ–¥–µ–ª—å", index=False)
        
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Excel",
            data=output.getvalue(),
            file_name=f"—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è_–∑–∞–∫—É–ø–∫–∏_{date_input.strftime('%Y%m%d')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True
        )
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é' –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è
st.markdown("---")
st.subheader("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
st.write("""
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –±—É–¥—É—â–µ–º. 
–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É –æ–±—ä–µ–º—É –∑–∞–∫—É–ø–æ–∫.
""")